## 1. Virtual DOM 개요

Virtual DOM은 React가 컴포넌트의 UI 구조를 메모리 상에서 JavaScript 객체 트리로 표현한 구조이다. 컴포넌트가 반환하는 JSX는 결국 `React.createElement()` 호출을 통해 React Element 객체로 변환되며, 이 객체들로 구성된 트리가 Virtual DOM을 이룬다.

```js
{
  type: 'div',
  props: {
    id: 'container',
    children: [
      {
        type: 'h1',
        props: {
          children: 'Hello'
        }
      },
      {
        type: 'p',
        props: {
          children: 'World'
        }
      }
    ]
  }
}
```

위와 같은 구조가 메모리에 생성되며, React는 상태 변경이 발생할 때마다 새로운 Virtual DOM을 생성하고, 이전 Virtual DOM과 비교(diffing)하여 실제 DOM에 반영할 변경 사항만 추출한다.


## 2. Virtual DOM의 역할

- 컴포넌트가 렌더링될 때마다 새로운 Virtual DOM을 생성
- 이전 Virtual DOM과 비교하여 변경 사항을 계산 (Diffing)
- 변경된 부분만 실제 DOM에 반영 (Commit)
- DOM 조작 최소화를 통한 성능 최적화


## 3. Virtual DOM 내부 구조

React의 Virtual DOM은 React Element들의 트리이다. 각 노드는 다음과 같은 속성을 가진다:

- `type`: 태그 이름 (예: 'div'), 혹은 컴포넌트 함수/클래스
- `key`: 동일 계층 내에서 엘리먼트 구분용 고유값
- `props`: 엘리먼트의 속성과 자식 노드 정보

이러한 React Element를 기반으로 React는 Fiber Node를 생성하여 렌더링을 수행한다. (Fiber 구조는 별도 정리)


## 4. 상태 변경 이후 흐름

1. 상태 변경 함수(`setState`, `setCount`, etc.) 호출
2. 해당 컴포넌트와 하위 컴포넌트가 다시 실행되어 새로운 React Element 생성
3. React Element → Virtual DOM으로 구성
4. 이전 Virtual DOM과 새로운 Virtual DOM을 비교 (Diffing)
5. 변경 사항을 Update Queue에 등록
6. Commit Phase에서 DOM에 실제 반영


## 5. Diffing 알고리즘

React는 효율적인 비교를 위해 다음과 같은 휴리스틱을 기반으로 동작한다:

- 동일 레벨의 노드끼리만 비교한다 (트리 구조 전체 재귀 탐색은 하지 않음)
- 서로 다른 타입의 노드는 완전히 새로 생성하고 기존 노드는 제거한다
- 동일한 타입의 노드는 props를 비교하여 변경 사항을 추적한다
- 리스트 구조에서는 key를 기준으로 항목의 변경 여부를 판단한다

### 예외 및 최적화 규칙
- 텍스트 노드 변경 시: 텍스트만 교체
- DOM 노드 재사용 가능 시: props만 변경
- 리스트 재정렬 시: key가 없으면 순서 기반으로 비교하여 비효율 발생


## 6. Key의 의미와 역할

key는 동일 계층에서 항목을 식별하기 위한 값이다. 특히 배열로 구성된 children을 가진 컴포넌트에서는 key가 없으면 index 기반으로 비교가 수행되어 불필요한 마운트/언마운트가 발생한다.

```tsx
{items.map(item => (
  <li key={item.id}>{item.name}</li>
))}
```

key는 다음과 같은 기준으로 설정되어야 한다:
- 각 항목을 유일하게 식별할 수 있는 값
- 배열의 순서(index)는 가급적 피함


## 7. 실제 반영 과정

- 변경된 Virtual DOM 트리를 기반으로 React는 Fiber 트리 상에서 변경 플래그를 설정
- 변경 플래그가 있는 노드만을 대상으로 DOM Update Queue를 생성
- Commit Phase에서 이 Queue를 순회하며 실제 DOM에 패치
- 이 과정에서 ref 연결, effect 실행 등도 함께 처리됨


## 8. Virtual DOM의 장점 요약

- DOM 조작 횟수를 줄여 렌더링 성능 최적화
- 상태 변경 → UI 반영 과정이 일관되고 예측 가능함
- 플랫폼 독립적 구조 (React Native, SSR 등과 동일한 렌더링 원리 사용 가능)
- 선언형 UI와 잘 맞는 구조 (함수형 스타일에 적합)
